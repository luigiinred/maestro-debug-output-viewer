name: Build Electron App

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Import Apple certificates for code signing
      - name: Import Apple certificates
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CSC_LINK }}
          p12-password: ${{ secrets.CSC_KEY_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD || 'temporary_password' }}

      - name: Build Vite app
        run: npm run build

      # Create necessary assets and directories
      - name: Create necessary directories
        run: |
          mkdir -p electron/build/resources
          echo "This file ensures resources are present for code signing." > electron/build/resources/dummy.txt
          mkdir -p assets

      - name: Create DMG background
        run: node scripts/create-dmg-background.cjs || echo "DMG background creation skipped"

      - name: Create app icons
        run: node scripts/create-icons.cjs || echo "Icon creation skipped"

      # Make the scripts executable
      - name: Make scripts executable
        run: |
          chmod +x scripts/fix-code-signing.cjs
          chmod +x scripts/package-and-sign.cjs

      # Package and sign the app with verbose output
      - name: Package and sign the app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          DEBUG: electron-forge*,electron-osx-sign*
        run: |
          # Print environment for debugging (without secrets)
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Environment variables set: $(env | grep -v PASSWORD | grep -v CSC_LINK | grep -v SECRET)"

          # Run the package-and-sign script
          npm run package:sign

      - name: List output files
        run: |
          find out -type f -name "*.dmg" -o -name "*.zip" | sort

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            out/make/**/*.dmg
            out/make/**/*.zip
            out/make/**/*.yml

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
